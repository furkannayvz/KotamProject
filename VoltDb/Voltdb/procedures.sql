--CREATE TABLE
CREATE TABLE CUSTOMER (
    MSISDN VARCHAR(20) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    SURNAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PASSWORD VARCHAR(100)NOT NULL,
    SDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    NATIONAL_ID VARCHAR(11) UNIQUE NOT NULL
);

-- PACKAGE Table Creation
CREATE TABLE PACKAGE (
    PACKAGE_ID INTEGER PRIMARY KEY,
    PACKAGE_NAME VARCHAR(50) NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    AMOUNT_MINUTES INTEGER NOT NULL,
    AMOUNT_DATA INTEGER NOT NULL,
    AMOUNT_SMS INTEGER NOT NULL,
    PERIOD INTEGER NOT NULL
);

-- BALANCE Table Creation
CREATE TABLE BALANCE (
    BALANCE_ID INTEGER PRIMARY KEY,
    MSISDN VARCHAR(20),
    PACKAGE_ID INTEGER,
    BAL_LEFT_MINUTES INTEGER,
    BAL_LEFT_SMS INTEGER,
    BAL_LEFT_DATA INTEGER,
    SDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (MSISDN) REFERENCES CUSTOMER(MSISDN),
    FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGE(PACKAGE_ID)
);

-- PERSONAL_USAGE Table Creation
CREATE TABLE PERSONAL_USAGE (
    PERSONAL_USAGE_ID INTEGER PRIMARY KEY,
    GIVER_ID VARCHAR(20),
    RECEIVER_ID VARCHAR(20),
    USAGE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USAGE_TYPE VARCHAR(20),
    USAGE_DURATION INTEGER
);

-- NOTIFICATION_LOGS Table Creation
CREATE TABLE NOTIFICATION_LOGS (
    NOTIFICATION_ID INTEGER PRIMARY KEY,
    NOTIFICATION_TYPE VARCHAR(20),
    NOTIFICATION_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MSISDN VARCHAR(20),
    FOREIGN KEY (MSISDN) REFERENCES CUSTOMER(MSISDN)
);



--PROCEDURES

--CUSTOMER

-- INSERT NEW CUSTOMER *
CREATE PROCEDURE INSERT_NEW_CUSTOMER
AS
INSERT INTO CUSTOMER (MSISDN, NAME, SURNAME, EMAIL, PASSWORD, SDATE, NATIONAL_ID)
VALUES (?, ?, ?, ?, ?, ?, ?);

-- GET CUSTOMER INFO BY MSISDN *
CREATE PROCEDURE  GET_CUSTOMER_INFO_BY_MSISDN
AS
SELECT *
FROM CUSTOMER
WHERE MSISDN = ?;

-- UPDATE CUSTOMER PASSWORD *
CREATE PROCEDURE UPDATE_CUSTOMER_PASSWORD
AS
UPDATE CUSTOMER
SET PASSWORD = ?
WHERE EMAIL = ? AND NATIONAL_ID = ?;

-- CHECK IF CUSTOMER EXISTS *
CREATE PROCEDURE CHECK_CUSTOMER_EXISTS_BY_MAIL_AND_NATIONAL_ID
AS
SELECT COUNT(*)
FROM CUSTOMER
WHERE EMAIL = ? AND NATIONAL_ID = ?;

-- GET CUSTOMER PASSWORD BY MSISDN *
CREATE PROCEDURE GET_CUSTOMER_PASSWORD_BY_MSISDN
AS
SELECT PASSWORD
FROM CUSTOMER
WHERE MSISDN = ?;

-- GET CUSTOMER EMAIL BY MSISDN *
CREATE PROCEDURE GET_CUSTOMER_EMAIL_BY_MSISDN
AS
SELECT EMAIL
FROM CUSTOMER
WHERE MSISDN = ?;

-- GET MAX CUSTOMER MSISDN *
CREATE PROCEDURE GET_MAX_CUSTOMER_MSISDN
AS
SELECT MAX(MSISDN) AS MAX_MSISDN
FROM CUSTOMER;


--PACKAGE

-- GET PACKAGE NAME BY MSISDN *
CREATE PROCEDURE GET_PACKAGE_NAME_BY_MSISDN
AS
SELECT PACKAGE_NAME
FROM PACKAGE
WHERE PACKAGE_ID = (
    SELECT PACKAGE_ID
    FROM BALANCE
    WHERE MSISDN = ?
);

-- GET PACKAGE NAME BY PACKAGE ID *
CREATE PROCEDURE GET_PACKAGE_NAME_BY_PACKAGE_ID
AS
SELECT PACKAGE_NAME
FROM PACKAGE
WHERE PACKAGE_ID = ?;

-- GET PACKAGE INFO BY PACKAGE ID *
CREATE PROCEDURE GET_PACKAGE_INFO_BY_PACKAGE_ID
AS
SELECT *
FROM PACKAGE
WHERE PACKAGE_ID = ?;


-- GET PACKAGE BY MSISDN *
CREATE PROCEDURE GET_PACKAGE_INFO_BY_MSISDN
AS
SELECT *
FROM PACKAGE
WHERE PACKAGE_ID = (
    SELECT PACKAGE_ID
    FROM BALANCE
    WHERE MSISDN = ?
);

--BALANCE

--GET BALANCE INFO BY MSISDN *
CREATE PROCEDURE GET_BALANCE_INFO_BY_MSISDN
AS
SELECT *
FROM BALANCE
WHERE MSISDN = ?;

--INSERT BALANCE *
CREATE PROCEDURE INSERT_BALANCE
AS
INSERT INTO BALANCE (BALANCE_ID,MSISDN,PACKAGE_ID,BAL_LEFT_MINUTES,BAL_LEFT_SMS,BAL_LEFT_DATA,SDATE)
VALUES (?,?,?,?,?,?,?);

-- UPDATE BALANCE MINUTES BY MSISDN *
CREATE PROCEDURE UPDATE_BALANCE_MINUTES_BY_MSISDN
AS
UPDATE BALANCE
SET BAL_LEFT_MINUTES = ?
WHERE MSISDN = ?;


-- UPDATE BALANCE SMS BY MSISDN *
CREATE PROCEDURE UPDATE_BALANCE_SMS_BY_MSISDN
AS
UPDATE BALANCE
SET BAL_LEFT_SMS = ?
WHERE MSISDN = ?;


-- UPDATE BALANCE DATA BY MSISDN *
CREATE PROCEDURE UPDATE_BALANCE_DATA_BY_MSISDN
AS
UPDATE BALANCE
SET BAL_LEFT_DATA= ?
WHERE MSISDN = ?;

-- GET MAX BALANCE ID *
CREATE PROCEDURE GET_MAX_BALANCE_ID
AS
SELECT MAX(BALANCE_ID) AS MAX_BALANCE_ID
FROM BALANCE;













